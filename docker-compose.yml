#
# Docker compose file to startup ActiveMQ && RabbitMQ in docker
# so you can run tests.
# Note You don't have to create junit_Queue; RabbitMQ does that automatically under the covers, but of course, you're left
# with a durable queue post tests.

# Now create a file unit-tests.properties.template.MACHINENAME (e.g. unit-tests.properties.template.LHR12345)

#junit.rabbitmq.enabled=true
#junit.rabbitmq.broker=amqp://admin:admin@localhost:5672/vhost
#junit.rabbitmq.topic.JmxServiceURL=service:jmx:rabbitmq:///${junit.rabbitmq.broker}?jmx.type=Topic&jmx.destination=junit_Topic
#junit.rabbitmq.queue.JmxServiceURL=service:jmx:rabbitmq:///${junit.rabbitmq.broker}?jmx.type=Queue&jmx.destination=junit_Queue

version: '2'
services:
  rabbitmq:
    hostname: rabbitmq.local
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_PASS: admin
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_VHOST: vhost
    ports:
      - '4369:4369'
      - '5671:5671'
      - '5672:5672'
      - '25672:25672'
      - '15672:15672'
